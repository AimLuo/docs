{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5b89\u88c5 NPM Package yarn add molstar or npm install molstar \u901a\u8fc7 import \u8bed\u6cd5\u5f15\u7528 molstar/lib/... import { PluginContext } from 'molstar/lib/mol-plugin/context' ; Clone from GitHub molstar \u6e90\u7801\u4ed3\u5e93 git clone https://github.com/molstar/molstar.git cd molstar npm install npm build For a watch task to automatically rebuild the source code on changes, run npm run watch or if working just with the Viewer app for better performance npm run watch-viewer","title":"\u5b89\u88c5"},{"location":"#_1","text":"","title":"\u5b89\u88c5"},{"location":"#npm-package","text":"yarn add molstar or npm install molstar \u901a\u8fc7 import \u8bed\u6cd5\u5f15\u7528 molstar/lib/... import { PluginContext } from 'molstar/lib/mol-plugin/context' ;","title":"NPM Package"},{"location":"#clone-from-github","text":"molstar \u6e90\u7801\u4ed3\u5e93 git clone https://github.com/molstar/molstar.git cd molstar npm install npm build For a watch task to automatically rebuild the source code on changes, run npm run watch or if working just with the Viewer app for better performance npm run watch-viewer","title":"Clone from GitHub"},{"location":"data-state/","text":"\u6570\u636e\uff08Data\uff09 \u72b6\u6001\u7ba1\u7406 Managers State Tree, Selectors, Transforms State Snapshots","title":"\u6570\u636e\uff08Data\uff09 \u72b6\u6001\u7ba1\u7406"},{"location":"data-state/#data","text":"","title":"\u6570\u636e\uff08Data\uff09 \u72b6\u6001\u7ba1\u7406"},{"location":"data-state/#managers","text":"","title":"Managers"},{"location":"data-state/#state-tree-selectors-transforms","text":"","title":"State Tree, Selectors, Transforms"},{"location":"data-state/#state-snapshots","text":"","title":"State Snapshots"},{"location":"examples/","text":"\u793a\u4f8b \u770b Mol* Apps \u548c Examples .","title":"\u793a\u4f8b"},{"location":"examples/#_1","text":"\u770b Mol* Apps \u548c Examples .","title":"\u793a\u4f8b"},{"location":"plugin/","text":"\u521b\u5efa Molstar \u5b9e\u4f8b \u6709\u56db\u4e2a\u65b9\u6cd5\u6765\u4f7f\u7528 Mol* \u4f7f\u7528 Viewer molstar \u63d0\u4f9b\u4e86\u4e00\u4e2a \u5df2\u7ecf\u96c6\u6210 Molstar \u7684 viewer app \u6700\u57fa\u7840\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 Viewer \u3002 \u8fd9\u6700\u9002\u5408\u4e8e\u4e0d\u9700\u8981\u592a\u591a\u81ea\u5b9a\u4e49\u884c\u4e3a\u5e76\u4e14\u4e3b\u8981\u662f\u663e\u793a\u7ed3\u6784\u7684\u7528\u4f8b\u3002 \u4ece src/apps/viewer/app.ts \u67e5\u770b Viewer \u7684\u914d\u7f6e\u548c\u65b9\u6cd5 \u4e0d\u4f7f\u7528WebPack\u7684\u4f7f\u7528\u793a\u4f8b: < style > # app { position : absolute ; left : 100 px ; top : 100 px ; width : 800 px ; height : 600 px ; } </ style > <!-- molstar.js \u548c .css \u6765\u6e90\u4e8e - \u6e90\u7801\u7f16\u8bd1\u540e\uff0c/build/viewer - NPM package \u65b9\u5f0f\uff0c\u4f4d\u4e8e molstar/build/viewer \u4e2d --> < link rel = \"stylesheet\" type = \"text/css\" href = \"molstar.css\" /> < script type = \"text/javascript\" src = \"./molstar.js\" ></ script > < div id = \"app\" ></ div > < script type = \"text/javascript\" > var viewer = new molstar . Viewer ( 'app' , { layoutIsExpanded : false , layoutShowControls : false , layoutShowRemoteState : false , layoutShowSequence : true , layoutShowLog : false , layoutShowLeftPanel : true , viewportShowExpand : true , viewportShowSelectionMode : false , viewportShowAnimation : false , pdbProvider : 'rcsb' , emdbProvider : 'rcsb' , }); viewer . loadPdb ( '7bv2' ); viewer . loadEmdb ( 'EMD-30210' , { detail : 6 }); </ script > \u62e5\u6709 webpack \u7b49\u6784\u5efa\u5de5\u5177 import { Viewer } from 'molstar/build/viewer/molstar' function initViewer ( target : string | HTMLElement ) { return new Viewer ( target , { /* options */ }) } \u4f7f\u7528 PluginContext \uff08\u901a\u8fc7\u5185\u7f6e\u7684 React UI \uff09 \u5f53\u9700\u8981\u66f4\u591a\u5b9a\u5236\u9009\u9879\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 PluginContext \u521b\u5efa\u793a\u4f8b\u65f6\u53ef\u4ee5\u5b9a\u5236 PluginSpec . \u9ed8\u8ba4 PluginSpec PluginConfig \u63d0\u4f9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u9009\u9879 \u67e5\u770b Viewer State Management \uff0c\u4e86\u89e3\u66f4\u591a\u81ea\u5b9a\u4e49\u4fe1\u606f\uff0c\u6bd4\u5982\u80cc\u666f\u8272\u3002 \u6709\u5173\u6784\u5efa\u72b6\u6001\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Data State Management \u3002 import { DefaultPluginUISpec , PluginUISpec } from 'molstar/lib/mol-plugin-ui/spec' ; import { createPluginAsync } from 'molstar/lib/mol-plugin-ui/index' ; import { PluginConfig } from 'molstar/lib/mol-plugin/config' ; const MySpec : PluginUISpec = { ... DefaultPluginUISpec (), config : [ [ PluginConfig . VolumeStreaming . Enabled , false ] ] } async function createPlugin ( parent : HTMLElement ) { const plugin = await createPluginAsync ( parent , MySpec ); const data = await plugin . builders . data . download ({ url : '...' }, { state : { isGhost : true } }); const trajectory = await plugin . builders . structure . parseTrajectory ( data , format ); await this . plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' ); return plugin ; } createPlugin ( document . getElementById ( 'app' ) ! ); // app is a <div> element \u5728\u5176\u4ed6 react \u9879\u76ee\u4e2d\u4f7f\u7528\u5185\u7f6e\u7684 React UI function MolStarWrapper () { const parent = React . createRef < HTMLDivElement | null > (); useEffect (() => { let plugin : PluginContext | undefined = undefined ; async function init () { plugin = createPlugin ( parent . current ); } init (); return () => { plugin ? . dispose (); }; }, []); return < div ref = { parent } style = {{ width : 640 , height : 480 }} /> ; } PluginContext \uff08\u4e0d\u901a\u8fc7\u5185\u7f6e React UI \u4f7f\u7528\uff09 PluginContext \u53ef\u4ee5\u4e0d\u901a\u8fc7\u5185\u7f6e UI \u5b9e\u4f8b\u5316 < div id = 'molstar-parent' style = 'position: absolute; top: 0; left: 0; right: 0; bottom: 0' > < canvas id = 'molstar-canvas' style = 'position: absolute; top: 0; left: 0; right: 0; bottom: 0' ></ canvas > </ div > import { DefaultPluginSpec , PluginSpec } from 'molstar/lib/mol-plugin/spec' ; import { PluginContext } from 'molstar/lib/mol-plugin/context' ; import { PluginConfig } from 'molstar/lib/mol-plugin/config' ; const MySpec : PluginSpec = { ... DefaultPluginSpec (), config : [ [ PluginConfig . VolumeStreaming . Enabled , false ] ] } async function init () { const plugin = new PluginContext ( MySpec ); await plugin . init (); const canvas = < HTMLCanvasElement > document . getElementById ( 'molstar-canvas' ); const parent = < HTMLDivElement > document . getElementById ( 'molstar-parent' ); if ( ! plugin . initViewer ( canvas , parent )) { console . error ( 'Failed to init Mol*' ); return ; } const data = await plugin . builders . data . download ({ url : '...' }, { state : { isGhost : true } }); const trajectory = await plugin . builders . structure . parseTrajectory ( data , format ); await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' ); } \u4f7f\u7528 Canvas3D \uff08\u4e0d\u901a\u8fc7\u5185\u7f6e\u72b6\u6001\u7ba1\u7406\uff09 \u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 PluginContext \u5bf9\u8c61\u53ef\u4ee5\u5b8c\u5168\u7701\u7565\u3002 \u67e5\u770b Browser Tests \u793a\u4f8b const canvas = document . getElementById ( 'canvas' ); // parent <canvas> element const canvas3d = Canvas3D . create ( Canvas3DContext . fromCanvas ( canvas )); canvas3d . animate (); // use the canvas3d object here","title":"\u521b\u5efa Molstar \u5b9e\u4f8b"},{"location":"plugin/#molstar","text":"\u6709\u56db\u4e2a\u65b9\u6cd5\u6765\u4f7f\u7528 Mol*","title":"\u521b\u5efa Molstar \u5b9e\u4f8b"},{"location":"plugin/#viewer","text":"molstar \u63d0\u4f9b\u4e86\u4e00\u4e2a \u5df2\u7ecf\u96c6\u6210 Molstar \u7684 viewer app \u6700\u57fa\u7840\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 Viewer \u3002 \u8fd9\u6700\u9002\u5408\u4e8e\u4e0d\u9700\u8981\u592a\u591a\u81ea\u5b9a\u4e49\u884c\u4e3a\u5e76\u4e14\u4e3b\u8981\u662f\u663e\u793a\u7ed3\u6784\u7684\u7528\u4f8b\u3002 \u4ece src/apps/viewer/app.ts \u67e5\u770b Viewer \u7684\u914d\u7f6e\u548c\u65b9\u6cd5 \u4e0d\u4f7f\u7528WebPack\u7684\u4f7f\u7528\u793a\u4f8b: < style > # app { position : absolute ; left : 100 px ; top : 100 px ; width : 800 px ; height : 600 px ; } </ style > <!-- molstar.js \u548c .css \u6765\u6e90\u4e8e - \u6e90\u7801\u7f16\u8bd1\u540e\uff0c/build/viewer - NPM package \u65b9\u5f0f\uff0c\u4f4d\u4e8e molstar/build/viewer \u4e2d --> < link rel = \"stylesheet\" type = \"text/css\" href = \"molstar.css\" /> < script type = \"text/javascript\" src = \"./molstar.js\" ></ script > < div id = \"app\" ></ div > < script type = \"text/javascript\" > var viewer = new molstar . Viewer ( 'app' , { layoutIsExpanded : false , layoutShowControls : false , layoutShowRemoteState : false , layoutShowSequence : true , layoutShowLog : false , layoutShowLeftPanel : true , viewportShowExpand : true , viewportShowSelectionMode : false , viewportShowAnimation : false , pdbProvider : 'rcsb' , emdbProvider : 'rcsb' , }); viewer . loadPdb ( '7bv2' ); viewer . loadEmdb ( 'EMD-30210' , { detail : 6 }); </ script > \u62e5\u6709 webpack \u7b49\u6784\u5efa\u5de5\u5177 import { Viewer } from 'molstar/build/viewer/molstar' function initViewer ( target : string | HTMLElement ) { return new Viewer ( target , { /* options */ }) }","title":"\u4f7f\u7528 Viewer"},{"location":"plugin/#plugincontext-react-ui","text":"\u5f53\u9700\u8981\u66f4\u591a\u5b9a\u5236\u9009\u9879\u65f6\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 PluginContext \u521b\u5efa\u793a\u4f8b\u65f6\u53ef\u4ee5\u5b9a\u5236 PluginSpec . \u9ed8\u8ba4 PluginSpec PluginConfig \u63d0\u4f9b\u989d\u5916\u7684\u81ea\u5b9a\u4e49\u9009\u9879 \u67e5\u770b Viewer State Management \uff0c\u4e86\u89e3\u66f4\u591a\u81ea\u5b9a\u4e49\u4fe1\u606f\uff0c\u6bd4\u5982\u80cc\u666f\u8272\u3002 \u6709\u5173\u6784\u5efa\u72b6\u6001\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 Data State Management \u3002 import { DefaultPluginUISpec , PluginUISpec } from 'molstar/lib/mol-plugin-ui/spec' ; import { createPluginAsync } from 'molstar/lib/mol-plugin-ui/index' ; import { PluginConfig } from 'molstar/lib/mol-plugin/config' ; const MySpec : PluginUISpec = { ... DefaultPluginUISpec (), config : [ [ PluginConfig . VolumeStreaming . Enabled , false ] ] } async function createPlugin ( parent : HTMLElement ) { const plugin = await createPluginAsync ( parent , MySpec ); const data = await plugin . builders . data . download ({ url : '...' }, { state : { isGhost : true } }); const trajectory = await plugin . builders . structure . parseTrajectory ( data , format ); await this . plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' ); return plugin ; } createPlugin ( document . getElementById ( 'app' ) ! ); // app is a <div> element \u5728\u5176\u4ed6 react \u9879\u76ee\u4e2d\u4f7f\u7528\u5185\u7f6e\u7684 React UI function MolStarWrapper () { const parent = React . createRef < HTMLDivElement | null > (); useEffect (() => { let plugin : PluginContext | undefined = undefined ; async function init () { plugin = createPlugin ( parent . current ); } init (); return () => { plugin ? . dispose (); }; }, []); return < div ref = { parent } style = {{ width : 640 , height : 480 }} /> ; }","title":"\u4f7f\u7528 PluginContext\uff08\u901a\u8fc7\u5185\u7f6e\u7684 React UI \uff09"},{"location":"plugin/#plugincontext-react-ui_1","text":"PluginContext \u53ef\u4ee5\u4e0d\u901a\u8fc7\u5185\u7f6e UI \u5b9e\u4f8b\u5316 < div id = 'molstar-parent' style = 'position: absolute; top: 0; left: 0; right: 0; bottom: 0' > < canvas id = 'molstar-canvas' style = 'position: absolute; top: 0; left: 0; right: 0; bottom: 0' ></ canvas > </ div > import { DefaultPluginSpec , PluginSpec } from 'molstar/lib/mol-plugin/spec' ; import { PluginContext } from 'molstar/lib/mol-plugin/context' ; import { PluginConfig } from 'molstar/lib/mol-plugin/config' ; const MySpec : PluginSpec = { ... DefaultPluginSpec (), config : [ [ PluginConfig . VolumeStreaming . Enabled , false ] ] } async function init () { const plugin = new PluginContext ( MySpec ); await plugin . init (); const canvas = < HTMLCanvasElement > document . getElementById ( 'molstar-canvas' ); const parent = < HTMLDivElement > document . getElementById ( 'molstar-parent' ); if ( ! plugin . initViewer ( canvas , parent )) { console . error ( 'Failed to init Mol*' ); return ; } const data = await plugin . builders . data . download ({ url : '...' }, { state : { isGhost : true } }); const trajectory = await plugin . builders . structure . parseTrajectory ( data , format ); await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' ); }","title":"PluginContext\uff08\u4e0d\u901a\u8fc7\u5185\u7f6e React UI \u4f7f\u7528\uff09"},{"location":"plugin/#canvas3d","text":"\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684 PluginContext \u5bf9\u8c61\u53ef\u4ee5\u5b8c\u5168\u7701\u7565\u3002 \u67e5\u770b Browser Tests \u793a\u4f8b const canvas = document . getElementById ( 'canvas' ); // parent <canvas> element const canvas3d = Canvas3D . create ( Canvas3DContext . fromCanvas ( canvas )); canvas3d . animate (); // use the canvas3d object here","title":"\u4f7f\u7528 Canvas3D\uff08\u4e0d\u901a\u8fc7\u5185\u7f6e\u72b6\u6001\u7ba1\u7406\uff09"},{"location":"selections/","text":"\u9009\u4e2d\u6a21\u5f0f\uff08selections\uff09","title":"\u9009\u4e2d\u6a21\u5f0f\uff08selections\uff09"},{"location":"selections/#selections","text":"","title":"\u9009\u4e2d\u6a21\u5f0f\uff08selections\uff09"},{"location":"viewer-state/","text":"\u89c6\u56fe\uff08Viewer\uff09 \u72b6\u6001\u7ba1\u7406 Canvas3D Properties Canvas3D \u7684\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 PluginCommands \u4fee\u6539 \u6539\u53d8\u80cc\u666f\u8272\uff0c\u9ad8\u4eae\uff0c\u9009\u4e2d\u8272 import { ColorNames } from 'molstar/lib/mol-util/color/names' ; import { PluginCommands } from 'molstar/lib/mol-plugin/commands' ; const renderer = plugin . canvas3d ! . props . renderer ; PluginCommands . Canvas3D . SetSettings ( plugin , { settings : { renderer : { ... renderer , backgroundColor : ColorNames.red /* or: 0xff0000 as Color */ } } }); \u7c7b\u4f3c\u7684, highlightColor \u548c selectColor \u53ef\u4ee5\u88ab\u66f4\u65b0 \u4ea4\u4e92\uff08interactivity\uff09 Mol* \u7684\u4ea4\u4e92\u662f\u57fa\u4e8e Loci \uff08\u70b9\uff0c\u5750\u6807\u7684\u96c6\u5408\uff1f\uff09 \u7684\u6982\u5ff5. Loci \u901a\u5e38\u5f15\u7528\u4e00\u7ec4\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 Selection \u521b\u5efa\u3002 For example, the Loci \u901a\u8fc7\u86cb\u767d\u8d28\u7684label_asym_id B \u6355\u83b7\u94fe\u4e2d\u7684\u6240\u6709\u539f\u5b50: import { Script } from 'molstar/lib/mol-script/script' ; import { StructureSelection } from 'molstar/lib/mol-model/structure/query' ; const data = plugin . managers . structure . hierarchy . current . structures [ 0 ] ? . cell . obj ? . data ; if ( ! data ) return ; const selection = Script . getStructureSelection ( Q => Q . struct . generator . atomGroups ({ 'chain-test' : Q . core . rel . eq ([ 'B' , Q . ammp ( 'label_asym_id' )]) }), data ); const loci = StructureSelection . toLociWithSourceUnits ( selection ); \u4e00\u4e2a Loci \u53ef\u4ee5\u7528\u4e8e\u89e6\u53d1 Behaviors . Mol* \u65e5\u5fd7 \u5185\u7f6e\u7684\u65e5\u5fd7\u4fe1\u606f\u4f4d\u4e8e\u5e95\u90e8\u4e2d\u592e plugin . log . message ( 'This message will appear in the Mol* console' ); \u5176\u4ed6\u65e5\u5fd7\u7b49\u7ea7\u6709: info , warn , and error . \u663e\u793a Toast \u4fe1\u606f Toast \u6d88\u606f\u5c06\u51fa\u73b0\u5728\u63d2\u4ef6\u7684\u53f3\u4e0b\u65b9\uff0c\u5e76\u5728\u6d88\u5931\u524d\u505c\u7559\u4e00\u6bb5\u6709\u9650\u7684\u65f6\u95f4\u3002 import { PluginCommands } from 'molstar/lib/mol-plugin/commands' ; PluginCommands . Toast . Show ( plugin , { title : 'Custom Message' , message : 'A custom toast message that will disappear after 2 seconds.' , key : 'toast-custom' , timeoutMs : 2000 }); \u884c\u4e3a\uff08Behaviors\uff09 Mol*\u63d2\u4ef6\u7684\u72b6\u6001\u901a\u5e38\u7531\u52a8\u6001\u884c\u4e3a\uff08behaviors\uff09\u63a7\u5236\uff0c\u52a8\u6001\u884c\u4e3a\uff08behaviors\uff09\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u66f4\u65b0\u3002\u8fd9\u5141\u8bb8\u5355\u4e2a\u63d2\u4ef6\u5b9e\u4f8b\u7684\u9ad8\u5ea6\u6a21\u5757\u5316\u548c\u53ef\u5b9a\u5236\u6027\u3002 \u9ad8\u4eae\uff08Highlight\uff09 Loci \u9ad8\u4eae\u4f1a\u77ed\u6682\u663e\u793a\uff0c\u76f4\u5230\u9f20\u6807\u79fb\u52a8\u5230\u5176\u4ed6\u5bf9\u8c61\u4e0a\u3002\u53ef\u4ee5\u6309\u4e0b\u9762\u65b9\u6cd5\u8bbe\u7f6e Loci \u9ad8\u4eae: plugin . managers . interactivity . lociHighlights . highlightOnly ({ loci }); \u91cd\u7f6e\u6240\u6709\u9ad8\u4eae: plugin . managers . interactivity . clearHighlights (); \u9009\u4e2d\uff08Select\uff09 Loci Selected elements will appear with distinct visuals and, if applicable, the corresponding sequence positions will be shown in the Sequence Viewer panel. Selections persist until removed, for example by clicking the background. A Loci is selected by: \u9009\u5b9a\u7684\u5143\u7d20\u5c06\u4ee5\u4e0d\u540c\u7684\u89c6\u89c9\u6548\u679c\u51fa\u73b0\uff0c\u5982\u679c\u9002\u7528\uff0c\u76f8\u5e94\u7684\u5e8f\u5217\u4f4d\u7f6e\u5c06\u663e\u793a\u5728 Sequence Viewer panel \u4e2d\u3002\u9009\u62e9\u4f1a\u4e00\u76f4\u4fdd\u7559\uff0c\u76f4\u5230\u88ab\u79fb\u9664\uff0c\u4f8b\u5982\u901a\u8fc7\u5355\u51fb\u80cc\u666f\u3002 Loci \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u9009\u62e9: plugin . managers . interactivity . lociSelects . select ({ loci }); \u53d6\u6d88\u9009\u4e2d Loci : plugin . managers . interactivity . lociSelects . deselect ({ loci }); \u53d6\u6d88\u6240\u6709\u9009\u4e2d: plugin . managers . interactivity . lociSelects . deselectAll (); \u805a\u7126\uff08Focus\uff09 Loci The focus representation shows a Loci in ball-and-stick representation and, additionally, visualizes non-covalent interactions between atoms of the Loci as well as interactions with surrounding residues (default: 5 \u00c5). \u663e\u793a\u5565\u6b8b\u57fa\u4e4b\u7c7b\u7684 plugin . managers . structure . focus . setFromLoci ( loci ); \u6dfb\u52a0: plugin . managers . structure . focus . addFromLoci ( loci ); \u91cd\u7f6e: plugin . managers . structure . focus . clear (); \u7f29\u653e\uff08Zoom\uff09 Loci \u805a\u7126 plugin . managers . camera . focusLoci ( loci ); \u91cd\u7f6e plugin . managers . camera . reset ();","title":"\u89c6\u56fe\uff08Viewer\uff09 \u72b6\u6001\u7ba1\u7406"},{"location":"viewer-state/#viewer","text":"","title":"\u89c6\u56fe\uff08Viewer\uff09 \u72b6\u6001\u7ba1\u7406"},{"location":"viewer-state/#canvas3d-properties","text":"Canvas3D \u7684\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7 PluginCommands \u4fee\u6539","title":"Canvas3D Properties"},{"location":"viewer-state/#_1","text":"import { ColorNames } from 'molstar/lib/mol-util/color/names' ; import { PluginCommands } from 'molstar/lib/mol-plugin/commands' ; const renderer = plugin . canvas3d ! . props . renderer ; PluginCommands . Canvas3D . SetSettings ( plugin , { settings : { renderer : { ... renderer , backgroundColor : ColorNames.red /* or: 0xff0000 as Color */ } } }); \u7c7b\u4f3c\u7684, highlightColor \u548c selectColor \u53ef\u4ee5\u88ab\u66f4\u65b0","title":"\u6539\u53d8\u80cc\u666f\u8272\uff0c\u9ad8\u4eae\uff0c\u9009\u4e2d\u8272"},{"location":"viewer-state/#interactivity","text":"Mol* \u7684\u4ea4\u4e92\u662f\u57fa\u4e8e Loci \uff08\u70b9\uff0c\u5750\u6807\u7684\u96c6\u5408\uff1f\uff09 \u7684\u6982\u5ff5. Loci \u901a\u5e38\u5f15\u7528\u4e00\u7ec4\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7 Selection \u521b\u5efa\u3002 For example, the Loci \u901a\u8fc7\u86cb\u767d\u8d28\u7684label_asym_id B \u6355\u83b7\u94fe\u4e2d\u7684\u6240\u6709\u539f\u5b50: import { Script } from 'molstar/lib/mol-script/script' ; import { StructureSelection } from 'molstar/lib/mol-model/structure/query' ; const data = plugin . managers . structure . hierarchy . current . structures [ 0 ] ? . cell . obj ? . data ; if ( ! data ) return ; const selection = Script . getStructureSelection ( Q => Q . struct . generator . atomGroups ({ 'chain-test' : Q . core . rel . eq ([ 'B' , Q . ammp ( 'label_asym_id' )]) }), data ); const loci = StructureSelection . toLociWithSourceUnits ( selection ); \u4e00\u4e2a Loci \u53ef\u4ee5\u7528\u4e8e\u89e6\u53d1 Behaviors .","title":"\u4ea4\u4e92\uff08interactivity\uff09"},{"location":"viewer-state/#mol","text":"\u5185\u7f6e\u7684\u65e5\u5fd7\u4fe1\u606f\u4f4d\u4e8e\u5e95\u90e8\u4e2d\u592e plugin . log . message ( 'This message will appear in the Mol* console' ); \u5176\u4ed6\u65e5\u5fd7\u7b49\u7ea7\u6709: info , warn , and error .","title":"Mol* \u65e5\u5fd7"},{"location":"viewer-state/#toast","text":"Toast \u6d88\u606f\u5c06\u51fa\u73b0\u5728\u63d2\u4ef6\u7684\u53f3\u4e0b\u65b9\uff0c\u5e76\u5728\u6d88\u5931\u524d\u505c\u7559\u4e00\u6bb5\u6709\u9650\u7684\u65f6\u95f4\u3002 import { PluginCommands } from 'molstar/lib/mol-plugin/commands' ; PluginCommands . Toast . Show ( plugin , { title : 'Custom Message' , message : 'A custom toast message that will disappear after 2 seconds.' , key : 'toast-custom' , timeoutMs : 2000 });","title":"\u663e\u793a Toast \u4fe1\u606f"},{"location":"viewer-state/#behaviors","text":"Mol*\u63d2\u4ef6\u7684\u72b6\u6001\u901a\u5e38\u7531\u52a8\u6001\u884c\u4e3a\uff08behaviors\uff09\u63a7\u5236\uff0c\u52a8\u6001\u884c\u4e3a\uff08behaviors\uff09\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u66f4\u65b0\u3002\u8fd9\u5141\u8bb8\u5355\u4e2a\u63d2\u4ef6\u5b9e\u4f8b\u7684\u9ad8\u5ea6\u6a21\u5757\u5316\u548c\u53ef\u5b9a\u5236\u6027\u3002","title":"\u884c\u4e3a\uff08Behaviors\uff09"},{"location":"viewer-state/#highlight-loci","text":"\u9ad8\u4eae\u4f1a\u77ed\u6682\u663e\u793a\uff0c\u76f4\u5230\u9f20\u6807\u79fb\u52a8\u5230\u5176\u4ed6\u5bf9\u8c61\u4e0a\u3002\u53ef\u4ee5\u6309\u4e0b\u9762\u65b9\u6cd5\u8bbe\u7f6e Loci \u9ad8\u4eae: plugin . managers . interactivity . lociHighlights . highlightOnly ({ loci }); \u91cd\u7f6e\u6240\u6709\u9ad8\u4eae: plugin . managers . interactivity . clearHighlights ();","title":"\u9ad8\u4eae\uff08Highlight\uff09 Loci"},{"location":"viewer-state/#select-loci","text":"Selected elements will appear with distinct visuals and, if applicable, the corresponding sequence positions will be shown in the Sequence Viewer panel. Selections persist until removed, for example by clicking the background. A Loci is selected by: \u9009\u5b9a\u7684\u5143\u7d20\u5c06\u4ee5\u4e0d\u540c\u7684\u89c6\u89c9\u6548\u679c\u51fa\u73b0\uff0c\u5982\u679c\u9002\u7528\uff0c\u76f8\u5e94\u7684\u5e8f\u5217\u4f4d\u7f6e\u5c06\u663e\u793a\u5728 Sequence Viewer panel \u4e2d\u3002\u9009\u62e9\u4f1a\u4e00\u76f4\u4fdd\u7559\uff0c\u76f4\u5230\u88ab\u79fb\u9664\uff0c\u4f8b\u5982\u901a\u8fc7\u5355\u51fb\u80cc\u666f\u3002 Loci \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u9009\u62e9: plugin . managers . interactivity . lociSelects . select ({ loci }); \u53d6\u6d88\u9009\u4e2d Loci : plugin . managers . interactivity . lociSelects . deselect ({ loci }); \u53d6\u6d88\u6240\u6709\u9009\u4e2d: plugin . managers . interactivity . lociSelects . deselectAll ();","title":"\u9009\u4e2d\uff08Select\uff09 Loci"},{"location":"viewer-state/#focus-loci","text":"The focus representation shows a Loci in ball-and-stick representation and, additionally, visualizes non-covalent interactions between atoms of the Loci as well as interactions with surrounding residues (default: 5 \u00c5). \u663e\u793a\u5565\u6b8b\u57fa\u4e4b\u7c7b\u7684 plugin . managers . structure . focus . setFromLoci ( loci ); \u6dfb\u52a0: plugin . managers . structure . focus . addFromLoci ( loci ); \u91cd\u7f6e: plugin . managers . structure . focus . clear ();","title":"\u805a\u7126\uff08Focus\uff09 Loci"},{"location":"viewer-state/#zoom-loci","text":"\u805a\u7126 plugin . managers . camera . focusLoci ( loci ); \u91cd\u7f6e plugin . managers . camera . reset ();","title":"\u7f29\u653e\uff08Zoom\uff09 Loci"},{"location":"data-access-tools/convert-to-bcif/","text":"Convert CIF to BinaryCIF BinaryCIF\u662fCIF\u683c\u5f0f\u7684\u4e00\u79cd\u6709\u6548\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 \u8be6\u60c5\u89c1 specification \u548c publication . \u8be5\u811a\u672c\u8bfb\u53d6CIF\u683c\u5f0f\u7684\u6570\u636e\uff0c\u5e76\u5c06\u5176\u65e0\u635f\u8f6c\u6362\u4e3a\u53ef\u7531Mol*\u6216\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u8bfb\u53d6\u7684BinaryCIF\u6587\u4ef6\u3002 Example node lib/commonjs/cli/cif2bcif/index.js file.cif file.bcif Usage Argument Description src Source CIF to convert (can be gzipped) out Generated BinaryCIF output path -c Path to optional config file -f Path to optional filter file index.js [ -h ] [ -c CONFIG ] [ -f FILTER ] src out Config file Controls how certain columns will be encoded. This is a JSON array of instructions: interface EncodingStrategyHint { categoryName : string , columnName : string , encoding : 'pack' | 'rle' | 'delta' | 'delta-rle' , precision? : number } Identify a particular CIF columns by its name and override the encoding by Integer Packing, Run-Length Encoding, Delta Encoding, or Delta & Run-Length Encoding. You can optionally control the precision if dealing with float values. Filter file Specifies which categories and columns will be written. This is a plain text file, each line represents one entry. You can specify explicitly which categories or columns to include by adding category_name or category_name.field_name . You can also choose to ignore some categories or columns by adding !category_name or !category_name.field_name .","title":"Convert CIF to BinaryCIF"},{"location":"data-access-tools/convert-to-bcif/#convert-cif-to-binarycif","text":"BinaryCIF\u662fCIF\u683c\u5f0f\u7684\u4e00\u79cd\u6709\u6548\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\u3002 \u8be6\u60c5\u89c1 specification \u548c publication . \u8be5\u811a\u672c\u8bfb\u53d6CIF\u683c\u5f0f\u7684\u6570\u636e\uff0c\u5e76\u5c06\u5176\u65e0\u635f\u8f6c\u6362\u4e3a\u53ef\u7531Mol*\u6216\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u8bfb\u53d6\u7684BinaryCIF\u6587\u4ef6\u3002","title":"Convert CIF to BinaryCIF"},{"location":"data-access-tools/convert-to-bcif/#example","text":"node lib/commonjs/cli/cif2bcif/index.js file.cif file.bcif","title":"Example"},{"location":"data-access-tools/convert-to-bcif/#usage","text":"Argument Description src Source CIF to convert (can be gzipped) out Generated BinaryCIF output path -c Path to optional config file -f Path to optional filter file index.js [ -h ] [ -c CONFIG ] [ -f FILTER ] src out","title":"Usage"},{"location":"data-access-tools/convert-to-bcif/#config-file","text":"Controls how certain columns will be encoded. This is a JSON array of instructions: interface EncodingStrategyHint { categoryName : string , columnName : string , encoding : 'pack' | 'rle' | 'delta' | 'delta-rle' , precision? : number } Identify a particular CIF columns by its name and override the encoding by Integer Packing, Run-Length Encoding, Delta Encoding, or Delta & Run-Length Encoding. You can optionally control the precision if dealing with float values.","title":"Config file"},{"location":"data-access-tools/convert-to-bcif/#filter-file","text":"Specifies which categories and columns will be written. This is a plain text file, each line represents one entry. You can specify explicitly which categories or columns to include by adding category_name or category_name.field_name . You can also choose to ignore some categories or columns by adding !category_name or !category_name.field_name .","title":"Filter file"},{"location":"data-access-tools/create-ccd-table/","text":"Create Table from CCD Chemical Component Dictionary (CCD) \u4f5c\u4e3a\u5916\u90e8\u53c2\u8003\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u5728PDB\u6761\u76ee\u4e2d\u53d1\u73b0\u7684\u6240\u6709\u6b8b\u7559\u7269\u548c\u5c0f\u5206\u5b50\u6210\u5206\u3002 Protonation Variants Companion Dictionary (PVCD) \u5217\u4e3e\u4e86\u5178\u578b\u6c28\u57fa\u9178\u7684\u8d28\u5b50\u5316\u53d8\u4f53\u3002 This script bundles all chem_comp_bond information from the CCD and the PVCD into a single file for later use. Optionally, it can also generate a second output file that contains all chem_comp_atom information. \u8be5\u811a\u672c\u5c06\u6765\u81ea CCD \u548c PVCD \u7684\u6240\u6709chem_comp_bond\u4fe1\u606f\u6253\u5305\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4ee5\u5907\u540e\u7528\u3002\u6216\u8005\uff0c\u5b83\u4e5f\u53ef\u4ee5\u751f\u6210\u5305\u542b\u6240\u6709chem_comp_atom\u4fe1\u606f\u7684\u7b2c\u4e8c\u4e2a\u8f93\u51fa\u6587\u4ef6\uff08it can also generate a second output file that contains all chem_comp_atom information\uff09\u3002 Example node --max-old-space-size = 4096 lib/commonjs/cli/chem-comp-dict/create-table.js build/data/ccb.bcif -b Usage Argument Description out Generated file output path --forceDownload , -f Force download of CCD and PVCD --binary , -b Output as BinaryCIF --ccaOut , -a File output path of optionally generated chem_comp_atom create-table.js [ -h ] [ --forceDownload ] [ --binary ] [ --ccaOut CCAOUT ] out","title":"Create Table from CCD"},{"location":"data-access-tools/create-ccd-table/#create-table-from-ccd","text":"Chemical Component Dictionary (CCD) \u4f5c\u4e3a\u5916\u90e8\u53c2\u8003\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u5728PDB\u6761\u76ee\u4e2d\u53d1\u73b0\u7684\u6240\u6709\u6b8b\u7559\u7269\u548c\u5c0f\u5206\u5b50\u6210\u5206\u3002 Protonation Variants Companion Dictionary (PVCD) \u5217\u4e3e\u4e86\u5178\u578b\u6c28\u57fa\u9178\u7684\u8d28\u5b50\u5316\u53d8\u4f53\u3002 This script bundles all chem_comp_bond information from the CCD and the PVCD into a single file for later use. Optionally, it can also generate a second output file that contains all chem_comp_atom information. \u8be5\u811a\u672c\u5c06\u6765\u81ea CCD \u548c PVCD \u7684\u6240\u6709chem_comp_bond\u4fe1\u606f\u6253\u5305\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u4ee5\u5907\u540e\u7528\u3002\u6216\u8005\uff0c\u5b83\u4e5f\u53ef\u4ee5\u751f\u6210\u5305\u542b\u6240\u6709chem_comp_atom\u4fe1\u606f\u7684\u7b2c\u4e8c\u4e2a\u8f93\u51fa\u6587\u4ef6\uff08it can also generate a second output file that contains all chem_comp_atom information\uff09\u3002","title":"Create Table from CCD"},{"location":"data-access-tools/create-ccd-table/#example","text":"node --max-old-space-size = 4096 lib/commonjs/cli/chem-comp-dict/create-table.js build/data/ccb.bcif -b","title":"Example"},{"location":"data-access-tools/create-ccd-table/#usage","text":"Argument Description out Generated file output path --forceDownload , -f Force download of CCD and PVCD --binary , -b Output as BinaryCIF --ccaOut , -a File output path of optionally generated chem_comp_atom create-table.js [ -h ] [ --forceDownload ] [ --binary ] [ --ccaOut CCAOUT ] out","title":"Usage"},{"location":"data-access-tools/extract-ccd-ions/","text":"Extract Ions from CCD Chemical Component Dictionary (CCD) \u662f\u4e00\u4efd\u5916\u90e8\u53c2\u8003\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u5728PDB\u6761\u76ee\u4e2d\u53d1\u73b0\u7684\u6240\u6709\u6b8b\u7559\u7269\u548c\u5c0f\u5206\u5b50\u6210\u5206\u3002 \u6b64\u811a\u672c\u4ece CCD \u4e2d\u63d0\u53d6\u6240\u6709\u79bb\u5b50\uff0c\u5e76\u63d0\u4f9b\u5b83\u4eec\u7684\u540d\u79f0\u4f5c\u4e3a TypeScript set\u3002 Example node --max-old-space-size = 4096 lib/commonjs/cli/chem-comp-dict/create-ions.js src/mol-model/structure/model/types/ions.ts Usage Argument Description out Generated file output path --forceDownload , -f Force download of CCD create-ions.js [ -h ] [ --forceDownload ] out","title":"Extract Ions from CCD"},{"location":"data-access-tools/extract-ccd-ions/#extract-ions-from-ccd","text":"Chemical Component Dictionary (CCD) \u662f\u4e00\u4efd\u5916\u90e8\u53c2\u8003\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u5728PDB\u6761\u76ee\u4e2d\u53d1\u73b0\u7684\u6240\u6709\u6b8b\u7559\u7269\u548c\u5c0f\u5206\u5b50\u6210\u5206\u3002 \u6b64\u811a\u672c\u4ece CCD \u4e2d\u63d0\u53d6\u6240\u6709\u79bb\u5b50\uff0c\u5e76\u63d0\u4f9b\u5b83\u4eec\u7684\u540d\u79f0\u4f5c\u4e3a TypeScript set\u3002","title":"Extract Ions from CCD"},{"location":"data-access-tools/extract-ccd-ions/#example","text":"node --max-old-space-size = 4096 lib/commonjs/cli/chem-comp-dict/create-ions.js src/mol-model/structure/model/types/ions.ts","title":"Example"},{"location":"data-access-tools/extract-ccd-ions/#usage","text":"Argument Description out Generated file output path --forceDownload , -f Force download of CCD create-ions.js [ -h ] [ --forceDownload ] out","title":"Usage"},{"location":"data-access-tools/model-server/","text":"Model Server \u63d0\u4f9b\u5bf9\u5206\u5b501D\u30012D\u548c\u5206\u5b50\u76843D(\u4e9a)\u7ed3\u6784\u6a21\u578b\u7684\u8bbf\u95ee\u3002\u5b50\u7ed3\u6784\u7531 mol-script (MolQL)\u8bed\u8a00\u63cf\u8ff0\u3002\u5b83\u80fd\u591f\u201c\u52a8\u6001\u201d\u5c06\u989d\u5916\u6570\u636e\u7eb3\u5165mmCIF\uff0c\u4f8b\u5982\u6574\u5408\u6765\u81ea Chemical Component Dictionary (CCD) , Protonation Variants Companion Dictionary (PVCD) \u548c Biologically Interesting moleculeReference Dictionary (BIRD) \u7684\u4e3b\u8981PDB\u6863\u6848\u6570\u636e\u3002 \u4f8b\u5b50\uff08Example\uff09 node lib/commonjs/servers/model/server --sourceMap pdb-bcif '/opt/data/bcif/${id}.bcif' \u7528\u6cd5\uff08Usage\uff09 \u53c2\u6570 \u63cf\u8ff0 --version , -v \u663e\u793a\u7248\u672c\u53f7 --cfg JSON\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570/OS\u53d8\u91cf/\u9ed8\u8ba4\u503c\u3002 --printCfg \u6253\u5370\u5f53\u671f\u914d\u7f6e\u4fe1\u606f --cfgTemplate \u6253\u5370\u76f8\u5bf9\u4e8e\u9ed8\u8ba4\u914d\u7f6e\u7684\u4fee\u6539 --apiPrefix \u6307\u5b9a API \u524d\u7f6e\u8865\u5168\u8def\u5f84, i.e. <host>/<apiPrefix>/<API queries> --defaultPort \u6307\u5b9a\u8fd0\u884c\u7aef\u53e3 --cacheMaxSizeInBytes \u8bfb\u53d6\u7ed3\u6784\uff08Read structures\uff09\u7f13\u5b58\uff1a\u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\uff0c0\u8868\u793aoff --cacheEntryTimeoutMs \u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u6307\u5b9a\u5728\u7f13\u5b58\u4e2d\u4fdd\u5b58\u6761\u76ee\u7684\u65f6\u95f4 --requestTimeoutMs \u8bf7\u6c42\u8d85\u65f6\u8bbe\u7f6e --queryTimeoutMs \u670d\u52a1\u5668\u7528\u4e8e\u6267\u884c\u67e5\u8be2\u7684\u6700\u5927\u65f6\u95f4(\u4ee5ms\u4e3a\u5355\u4f4d)\uff0c\u4e0d\u5305\u62ec\u8bfb\u53d6\u548c\u5bfc\u51fa\u6570\u636e\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002 --shutdownTimeoutMinutes \u670d\u52a1\u5668\u5c06\u5728\u6b64\u65f6\u95f4\u540e\u5173\u95ed\uff0c0\u8868\u793a\u5173\u95ed\u3002 --shutdownTimeoutVarianceMinutes \u901a\u8fc7+/- ' timeoutVarianceMinutes '(\u907f\u514d\u591a\u4e2a\u5b9e\u4f8b\u540c\u65f6\u5173\u95ed)\u6765\u4fee\u6539\u5173\u95ed\u8ba1\u65f6\u5668 --maxQueryManyQueries \u67e5\u8be2\u5e76\u53d1\u6570 --defaultSource \u4fee\u6539\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8981\u4f7f\u7528\u7684 sourceMap --sourceMap Map id s for a source to a file path. Example: pdb-bcif '../../data/bcif/${id}.bcif' - JS expressions can be used inside ${} , e.g. ${id.substr(1, 2)}/${id}.mdb Can be specified multiple times. The SOURCE variable (e.g. pdb-bcif ) is arbitrary and depends on how you plan to use the server. \u652f\u6301\u683c\u5f0f: cif, bcif, cif.gz, bcif.gz --sourceMapUrl Same as --sourceMap but for URL. --sourceMapUrl src url format Example: pdb-cif \"https://www.ebi.ac.uk/pdbe/entry-files/download/${id}_updated.cif\" cif Supported formats: cif, bcif, cif.gz, bcif.gz node lib/commonjs/servers/model/server [ -h ] [ -v ] [ --cfg CFG ] [ --printCfg ] [ --cfgTemplate ] [ --apiPrefix PREFIX ] [ --defaultPort PORT ] [ --cacheMaxSizeInBytes CACHE_SIZE ] [ --cacheEntryTimeoutMs CACHE_TIMEOUT ] [ --requestTimeoutMs REQUEST_TIMEOUT ] [ --queryTimeoutMs QUERY_TIMEOUT ] [ --shutdownTimeoutMinutes TIME ] [ --shutdownTimeoutVarianceMinutes VARIANCE ] [ --maxQueryManyQueries QUERY_MANY_LIMIT ] [ --defaultSource DEFAULT_SOURCE ] [ --sourceMap SOURCE PATH ] [ --sourceMapUrl SOURCE PATH SOURCE_MAP_FORMAT ] Production Use In production, it is required to use a service that will keep the server running, such as forever.js . \u5185\u5b58\u95ee\u9898\uff08Memory Issues\uff09 nodejs \u7684\u5185\u5b58\u95ee\u9898\u6dfb\u52a0 --max-old-space-size=8192 \u53c2\u6570\u89e3\u51b3. \u9884\u5904\u7406\uff08Preprocessor\uff09 \u793a\u4f8b The preprocessor application allows addiing custom data to CIF files and/or \u9884\u5904\u7406\u5668\u5e94\u7528\u7a0b\u5e8f\u5141\u8bb8\u5c06\u81ea\u5b9a\u4e49\u6570\u636e\u6dfb\u52a0\u5230CIF\u6587\u4ef6\uff0c\u6216\u8005 \u8f6c\u6362 CIF \u4e3a BinaryCIF node lib/commonjs/servers/model/preprocess Preprocessor Usage Argument Description --input , -i Input filename --outCIF , -oc Output CIF filename --outBCIF , -ob Output BinaryCIF filename --cfg , -c Config file path --folderIn , -fin Convert folder --folderOutCIF , -foc Convert folder text output --folderOutBCIF , -fob Convert folder binary output --folderNumProcesses , -fp Convert folder number processes Example cfg.json: { \"numProcesses\" : 1 , \"customProperties\" : { \"sources\" : [ \"wwpdb\" ], \"params\" : { \"wwPDB\" : { \"chemCompBondTablePath\" : \"./build/data/ccb.bcif\" } } } } \u672c\u5730\u65b9\u5f0f\uff08Local Mode\uff09 The server can be run in local/file based mode using node lib/commonjs/servers/model/query \u81ea\u5b9a\u4e49\u5c5e\u6027\uff08Custom Properties\uff09 \u8be5\u529f\u80fd\u4ecd\u5728\u5f00\u53d1\u4e2d\u3002 It is possible to provide property descriptors that transform data to internal representation and define how it should be exported into one or mode CIF categories. Examples of this are located in the module and are linked to the server in the config and servers/model/properties . \u53ef\u4ee5\u63d0\u4f9b\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u7684\u5c5e\u6027\u63cf\u8ff0\u7b26\uff0c\u5e76\u5b9a\u4e49\u5b83\u5e94\u8be5\u5982\u4f55\u88ab\u5bfc\u51fa\u5230\u4e00\u4e2a\u6216\u591a\u4e2aCIF\u6a21\u5f0f\u7c7b\u522b\u4e2d\u3002\u8fd9\u65b9\u9762\u7684\u793a\u4f8b\u4f4d\u4e8e mol-model-props \u6a21\u5757\u4e2d\uff0c\u5305\u62ec\u94fe\u63a5\u5230\u914d\u7f6e\u548c servers/model/properties \u4e2d\u7684\u670d\u52a1\u5668\u3002","title":"Model Server"},{"location":"data-access-tools/model-server/#model-server","text":"\u63d0\u4f9b\u5bf9\u5206\u5b501D\u30012D\u548c\u5206\u5b50\u76843D(\u4e9a)\u7ed3\u6784\u6a21\u578b\u7684\u8bbf\u95ee\u3002\u5b50\u7ed3\u6784\u7531 mol-script (MolQL)\u8bed\u8a00\u63cf\u8ff0\u3002\u5b83\u80fd\u591f\u201c\u52a8\u6001\u201d\u5c06\u989d\u5916\u6570\u636e\u7eb3\u5165mmCIF\uff0c\u4f8b\u5982\u6574\u5408\u6765\u81ea Chemical Component Dictionary (CCD) , Protonation Variants Companion Dictionary (PVCD) \u548c Biologically Interesting moleculeReference Dictionary (BIRD) \u7684\u4e3b\u8981PDB\u6863\u6848\u6570\u636e\u3002","title":"Model Server"},{"location":"data-access-tools/model-server/#example","text":"node lib/commonjs/servers/model/server --sourceMap pdb-bcif '/opt/data/bcif/${id}.bcif'","title":"\u4f8b\u5b50\uff08Example\uff09"},{"location":"data-access-tools/model-server/#usage","text":"\u53c2\u6570 \u63cf\u8ff0 --version , -v \u663e\u793a\u7248\u672c\u53f7 --cfg JSON\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570/OS\u53d8\u91cf/\u9ed8\u8ba4\u503c\u3002 --printCfg \u6253\u5370\u5f53\u671f\u914d\u7f6e\u4fe1\u606f --cfgTemplate \u6253\u5370\u76f8\u5bf9\u4e8e\u9ed8\u8ba4\u914d\u7f6e\u7684\u4fee\u6539 --apiPrefix \u6307\u5b9a API \u524d\u7f6e\u8865\u5168\u8def\u5f84, i.e. <host>/<apiPrefix>/<API queries> --defaultPort \u6307\u5b9a\u8fd0\u884c\u7aef\u53e3 --cacheMaxSizeInBytes \u8bfb\u53d6\u7ed3\u6784\uff08Read structures\uff09\u7f13\u5b58\uff1a\u6307\u5b9a\u7f13\u5b58\u5927\u5c0f\uff0c0\u8868\u793aoff --cacheEntryTimeoutMs \u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u6307\u5b9a\u5728\u7f13\u5b58\u4e2d\u4fdd\u5b58\u6761\u76ee\u7684\u65f6\u95f4 --requestTimeoutMs \u8bf7\u6c42\u8d85\u65f6\u8bbe\u7f6e --queryTimeoutMs \u670d\u52a1\u5668\u7528\u4e8e\u6267\u884c\u67e5\u8be2\u7684\u6700\u5927\u65f6\u95f4(\u4ee5ms\u4e3a\u5355\u4f4d)\uff0c\u4e0d\u5305\u62ec\u8bfb\u53d6\u548c\u5bfc\u51fa\u6570\u636e\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002 --shutdownTimeoutMinutes \u670d\u52a1\u5668\u5c06\u5728\u6b64\u65f6\u95f4\u540e\u5173\u95ed\uff0c0\u8868\u793a\u5173\u95ed\u3002 --shutdownTimeoutVarianceMinutes \u901a\u8fc7+/- ' timeoutVarianceMinutes '(\u907f\u514d\u591a\u4e2a\u5b9e\u4f8b\u540c\u65f6\u5173\u95ed)\u6765\u4fee\u6539\u5173\u95ed\u8ba1\u65f6\u5668 --maxQueryManyQueries \u67e5\u8be2\u5e76\u53d1\u6570 --defaultSource \u4fee\u6539\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8981\u4f7f\u7528\u7684 sourceMap --sourceMap Map id s for a source to a file path. Example: pdb-bcif '../../data/bcif/${id}.bcif' - JS expressions can be used inside ${} , e.g. ${id.substr(1, 2)}/${id}.mdb Can be specified multiple times. The SOURCE variable (e.g. pdb-bcif ) is arbitrary and depends on how you plan to use the server. \u652f\u6301\u683c\u5f0f: cif, bcif, cif.gz, bcif.gz --sourceMapUrl Same as --sourceMap but for URL. --sourceMapUrl src url format Example: pdb-cif \"https://www.ebi.ac.uk/pdbe/entry-files/download/${id}_updated.cif\" cif Supported formats: cif, bcif, cif.gz, bcif.gz node lib/commonjs/servers/model/server [ -h ] [ -v ] [ --cfg CFG ] [ --printCfg ] [ --cfgTemplate ] [ --apiPrefix PREFIX ] [ --defaultPort PORT ] [ --cacheMaxSizeInBytes CACHE_SIZE ] [ --cacheEntryTimeoutMs CACHE_TIMEOUT ] [ --requestTimeoutMs REQUEST_TIMEOUT ] [ --queryTimeoutMs QUERY_TIMEOUT ] [ --shutdownTimeoutMinutes TIME ] [ --shutdownTimeoutVarianceMinutes VARIANCE ] [ --maxQueryManyQueries QUERY_MANY_LIMIT ] [ --defaultSource DEFAULT_SOURCE ] [ --sourceMap SOURCE PATH ] [ --sourceMapUrl SOURCE PATH SOURCE_MAP_FORMAT ]","title":"\u7528\u6cd5\uff08Usage\uff09"},{"location":"data-access-tools/model-server/#production-use","text":"In production, it is required to use a service that will keep the server running, such as forever.js .","title":"Production Use"},{"location":"data-access-tools/model-server/#memory-issues","text":"nodejs \u7684\u5185\u5b58\u95ee\u9898\u6dfb\u52a0 --max-old-space-size=8192 \u53c2\u6570\u89e3\u51b3.","title":"\u5185\u5b58\u95ee\u9898\uff08Memory Issues\uff09"},{"location":"data-access-tools/model-server/#preprocessor","text":"The preprocessor application allows addiing custom data to CIF files and/or \u9884\u5904\u7406\u5668\u5e94\u7528\u7a0b\u5e8f\u5141\u8bb8\u5c06\u81ea\u5b9a\u4e49\u6570\u636e\u6dfb\u52a0\u5230CIF\u6587\u4ef6\uff0c\u6216\u8005 \u8f6c\u6362 CIF \u4e3a BinaryCIF node lib/commonjs/servers/model/preprocess","title":"\u9884\u5904\u7406\uff08Preprocessor\uff09 \u793a\u4f8b"},{"location":"data-access-tools/model-server/#preprocessor-usage","text":"Argument Description --input , -i Input filename --outCIF , -oc Output CIF filename --outBCIF , -ob Output BinaryCIF filename --cfg , -c Config file path --folderIn , -fin Convert folder --folderOutCIF , -foc Convert folder text output --folderOutBCIF , -fob Convert folder binary output --folderNumProcesses , -fp Convert folder number processes Example cfg.json: { \"numProcesses\" : 1 , \"customProperties\" : { \"sources\" : [ \"wwpdb\" ], \"params\" : { \"wwPDB\" : { \"chemCompBondTablePath\" : \"./build/data/ccb.bcif\" } } } }","title":"Preprocessor Usage"},{"location":"data-access-tools/model-server/#local-mode","text":"The server can be run in local/file based mode using node lib/commonjs/servers/model/query","title":"\u672c\u5730\u65b9\u5f0f\uff08Local Mode\uff09"},{"location":"data-access-tools/model-server/#custom-properties","text":"\u8be5\u529f\u80fd\u4ecd\u5728\u5f00\u53d1\u4e2d\u3002 It is possible to provide property descriptors that transform data to internal representation and define how it should be exported into one or mode CIF categories. Examples of this are located in the module and are linked to the server in the config and servers/model/properties . \u53ef\u4ee5\u63d0\u4f9b\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5185\u90e8\u8868\u793a\u5f62\u5f0f\u7684\u5c5e\u6027\u63cf\u8ff0\u7b26\uff0c\u5e76\u5b9a\u4e49\u5b83\u5e94\u8be5\u5982\u4f55\u88ab\u5bfc\u51fa\u5230\u4e00\u4e2a\u6216\u591a\u4e2aCIF\u6a21\u5f0f\u7c7b\u522b\u4e2d\u3002\u8fd9\u65b9\u9762\u7684\u793a\u4f8b\u4f4d\u4e8e mol-model-props \u6a21\u5757\u4e2d\uff0c\u5305\u62ec\u94fe\u63a5\u5230\u914d\u7f6e\u548c servers/model/properties \u4e2d\u7684\u670d\u52a1\u5668\u3002","title":"\u81ea\u5b9a\u4e49\u5c5e\u6027\uff08Custom Properties\uff09"},{"location":"data-access-tools/plugin-state-server/","text":"Plugin State Server Provides a simple backend for online storing and sharing of Mol* sessions used by mol-plugin and mol-state modules. \u4e3a mol-plugin and mol-state \u6a21\u5757\u63d0\u4f9b\u7b80\u5355\u7684\u540e\u7aef\u670d\u52a1 Example node lib/commonjs/servers/plugin-state --workding-folder ~ Usage Argument Description --working-folder Working folder path --port Server port. Alternatively, use ENV variable PORT. --api-prefix Server API prefix --max-states Maximum number of states to save node lib/commonjs/servers/plugin-state [ -h ] --working-folder WORKING_FOLDER [ --port PORT ] [ --api-prefix API_PREFIX ] [ --max-states MAX_STATES ]","title":"Plugin State Server"},{"location":"data-access-tools/plugin-state-server/#plugin-state-server","text":"Provides a simple backend for online storing and sharing of Mol* sessions used by mol-plugin and mol-state modules. \u4e3a mol-plugin and mol-state \u6a21\u5757\u63d0\u4f9b\u7b80\u5355\u7684\u540e\u7aef\u670d\u52a1","title":"Plugin State Server"},{"location":"data-access-tools/plugin-state-server/#example","text":"node lib/commonjs/servers/plugin-state --workding-folder ~","title":"Example"},{"location":"data-access-tools/plugin-state-server/#usage","text":"Argument Description --working-folder Working folder path --port Server port. Alternatively, use ENV variable PORT. --api-prefix Server API prefix --max-states Maximum number of states to save node lib/commonjs/servers/plugin-state [ -h ] --working-folder WORKING_FOLDER [ --port PORT ] [ --api-prefix API_PREFIX ] [ --max-states MAX_STATES ]","title":"Usage"},{"location":"data-access-tools/volume-server/","text":"Volume Server Provides near-instantaneous access to volumetric data including density maps (for instance, from X-ray crystallography or cryo-electron microscopy experiments), spatial distribution data, output from electrostatic calculations. It works by utilizing adaptive downsampling (similar to how Google Earth works). \u63d0\u4f9b\u5bf9\u4f53\u79ef\u6570\u636e\u7684\u8fd1\u4e4e\u5373\u65f6\u7684\u8bbf\u95ee\uff0c\u5305\u62ec\u5bc6\u5ea6\u56fe(\u4f8b\u5982\uff0c\u6765\u81eaX\u5c04\u7ebf\u6676\u4f53\u5b66\u6216\u4f4e\u6e29\u7535\u5b50\u663e\u5fae\u955c\u5b9e\u9a8c)\u3001\u7a7a\u95f4\u5206\u5e03\u6570\u636e\u548c\u9759\u7535\u8ba1\u7b97\u8f93\u51fa\u3002\u5b83\u901a\u8fc7\u4f7f\u7528\u81ea\u9002\u5e94\u4e0b\u91c7\u6837\u6765\u5de5\u4f5c(\u7c7b\u4f3c\u4e8e\u8c37\u6b4c\u5730\u7403\u7684\u5de5\u4f5c\u65b9\u5f0f)\u3002 Example node lib/commonjs/servers/volume/server --idMap x-ray '/opt/data/xray/${id}.mdb' Usage Argument= Description --cfg JSON config file path. If a property is not specified, cmd line param/OS variable/default value are used. --printCfg Print current config for validation and exit. --cfgTemplate Prints default JSON config template to be modified and exit. --apiPrefix Specify the prefix of the API, i.e. <host>/<apiPrefix>/<API queries> --defaultPort Specify the port the server is running on --shutdownTimeoutMinutes Server will shut down after this amount of minutes, 0 for off. --shutdownTimeoutVarianceMinutes Modifies the shutdown timer by +/- timeoutVarianceMinutes (to avoid multiple instances shutting at the same time) --idMap Map id s for a type to a file path. Example: x-ray '../../data/mdb/xray/${id}-ccp4.mdb' - JS expressions can be used inside ${} , e.g. ${id.substr(1, 2)}/${id}.mdb - Can be specified multiple times. - The TYPE variable (e.g. x-ray ) is arbitrary and depends on how you plan to use the server. By default, Mol* Viewer uses x-ray and em , but any particular use case may vary. --maxRequestBlockCount Maximum number of blocks that could be read in 1 query. This is somewhat tied to the maxOutputSizeInVoxelCountByPrecisionLevel in that the &lt;maximum number of voxel&gt; = maxRequestBlockCount * &lt;block size&gt;^3 . The default block size is 96 which corresponds to 28,311,552 voxels with 32 max blocks. --maxFractionalBoxVolume The maximum fractional volume of the query box (to prevent queries that are too big). --maxOutputSizeInVoxelCountByPrecisionLevel What is the (approximate) maximum desired size in voxel count by precision level - Rule of thumb: &lt;response gzipped size&gt; in [&lt;voxel count&gt; / 8, &lt;voxel count&gt; / 4] . The maximum number of voxels is tied to maxRequestBlockCount. node lib/commonjs/servers/volume/server [ -h ] [ -v ] [ --cfg CFG ] [ --printCfg ] [ --cfgTemplate ] [ --apiPrefix PREFIX ] [ --defaultPort PORT ] [ --shutdownTimeoutMinutes TIME ] [ --shutdownTimeoutVarianceMinutes VARIANCE ] [ --idMap TYPE PATH ] [ --maxRequestBlockCount COUNT ] [ --maxFractionalBoxVolume VOLUME ] [ --maxOutputSizeInVoxelCountByPrecisionLevel LEVEL [ LEVEL ... ]]","title":"Volume Server"},{"location":"data-access-tools/volume-server/#volume-server","text":"Provides near-instantaneous access to volumetric data including density maps (for instance, from X-ray crystallography or cryo-electron microscopy experiments), spatial distribution data, output from electrostatic calculations. It works by utilizing adaptive downsampling (similar to how Google Earth works). \u63d0\u4f9b\u5bf9\u4f53\u79ef\u6570\u636e\u7684\u8fd1\u4e4e\u5373\u65f6\u7684\u8bbf\u95ee\uff0c\u5305\u62ec\u5bc6\u5ea6\u56fe(\u4f8b\u5982\uff0c\u6765\u81eaX\u5c04\u7ebf\u6676\u4f53\u5b66\u6216\u4f4e\u6e29\u7535\u5b50\u663e\u5fae\u955c\u5b9e\u9a8c)\u3001\u7a7a\u95f4\u5206\u5e03\u6570\u636e\u548c\u9759\u7535\u8ba1\u7b97\u8f93\u51fa\u3002\u5b83\u901a\u8fc7\u4f7f\u7528\u81ea\u9002\u5e94\u4e0b\u91c7\u6837\u6765\u5de5\u4f5c(\u7c7b\u4f3c\u4e8e\u8c37\u6b4c\u5730\u7403\u7684\u5de5\u4f5c\u65b9\u5f0f)\u3002","title":"Volume Server"},{"location":"data-access-tools/volume-server/#example","text":"node lib/commonjs/servers/volume/server --idMap x-ray '/opt/data/xray/${id}.mdb'","title":"Example"},{"location":"data-access-tools/volume-server/#usage","text":"Argument= Description --cfg JSON config file path. If a property is not specified, cmd line param/OS variable/default value are used. --printCfg Print current config for validation and exit. --cfgTemplate Prints default JSON config template to be modified and exit. --apiPrefix Specify the prefix of the API, i.e. <host>/<apiPrefix>/<API queries> --defaultPort Specify the port the server is running on --shutdownTimeoutMinutes Server will shut down after this amount of minutes, 0 for off. --shutdownTimeoutVarianceMinutes Modifies the shutdown timer by +/- timeoutVarianceMinutes (to avoid multiple instances shutting at the same time) --idMap Map id s for a type to a file path. Example: x-ray '../../data/mdb/xray/${id}-ccp4.mdb' - JS expressions can be used inside ${} , e.g. ${id.substr(1, 2)}/${id}.mdb - Can be specified multiple times. - The TYPE variable (e.g. x-ray ) is arbitrary and depends on how you plan to use the server. By default, Mol* Viewer uses x-ray and em , but any particular use case may vary. --maxRequestBlockCount Maximum number of blocks that could be read in 1 query. This is somewhat tied to the maxOutputSizeInVoxelCountByPrecisionLevel in that the &lt;maximum number of voxel&gt; = maxRequestBlockCount * &lt;block size&gt;^3 . The default block size is 96 which corresponds to 28,311,552 voxels with 32 max blocks. --maxFractionalBoxVolume The maximum fractional volume of the query box (to prevent queries that are too big). --maxOutputSizeInVoxelCountByPrecisionLevel What is the (approximate) maximum desired size in voxel count by precision level - Rule of thumb: &lt;response gzipped size&gt; in [&lt;voxel count&gt; / 8, &lt;voxel count&gt; / 4] . The maximum number of voxels is tied to maxRequestBlockCount. node lib/commonjs/servers/volume/server [ -h ] [ -v ] [ --cfg CFG ] [ --printCfg ] [ --cfgTemplate ] [ --apiPrefix PREFIX ] [ --defaultPort PORT ] [ --shutdownTimeoutMinutes TIME ] [ --shutdownTimeoutVarianceMinutes VARIANCE ] [ --idMap TYPE PATH ] [ --maxRequestBlockCount COUNT ] [ --maxFractionalBoxVolume VOLUME ] [ --maxOutputSizeInVoxelCountByPrecisionLevel LEVEL [ LEVEL ... ]]","title":"Usage"},{"location":"transforms/custom-trajectory/","text":"\u901a\u8fc7\u81ea\u5b9a\u4e49\u683c\u5f0f\u52a0\u8f7d Trajectory \u672c\u8282\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u4e13\u7528 Mol* \u5b9e\u4f8b\u4e2d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u52a0\u8f7d trajectory \u7684\u9ad8\u7ea7\u793a\u4f8b\u3002 \u66f4\u5b8c\u6574\u793a\u4f8b\u67e5\u770b G3D format extension . \u5b9a\u4e49\u548c\u4f7f\u7528\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668 import { StateTransformer } from 'molstar/lib/mol-state' ; const CreateTransformer = StateTransformer . builderFactory ( 'custom-namespace' ); export interface CustomTrajectoryData { // ... } export const TrajectoryFromCustomData = CreateTransformer ({ name : 'trajectory-from-custom-data' , display : 'Trajectory' , from : PluginStateObject.Root , to : PluginStateObject.Molecule.Trajectory , params : { data : PD.Value < CustomTrajectoryData > ( void 0 as any , { isHidden : true }), }, })({ apply ({ params }) { return Task . create ( 'Trajectory' , async ( ctx ) => { const models = await customParse ( params . data , ctx ); return new PluginStateObject . Molecule . Trajectory ( models , { label : 'Trajectory' , }); }); }, }); \u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff08 customParse \uff09\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u548c\u6269\u5c55 existing parser already available in Mol* \u6765\u5b9e\u73b0 \u7528\u8f6c\u6362\u5668 const data : CustomTrajectoryData = await ( await fetch ( url )). json (); const trajectory = await plugin . build (). toRoot (). apply ( TrajectoryFromCustomData , { data }). commit (); // Create the representation await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' ); \u901a\u8fc7 Mol* \u52a0\u8f7d\uff08download\uff09\u6570\u636e export const TrajectoryFromCustomData = CreateTransformer ({ name : 'trajectory-from-custom-data' , display : 'Trajectory' , from : PluginStateObject.Data.String , // or PluginStateObject.Data.Binary to : PluginStateObject.Molecule.Trajectory , })({ apply ({ a }) { return Task . create ( 'Trajectory' , async ( ctx ) => { const models = await customParse ( a . data , ctx ); return new PluginStateObject . Molecule . Trajectory ( models , { label : 'Trajectory' , }); }); }, }); ////////////// const data = await plugin . builders . data . download ({ url , isBinary }); const trajectory = await plugin . build (). to ( data ). apply ( TrajectoryFromCustomData , { data }). commit (); await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' );","title":"\u901a\u8fc7\u81ea\u5b9a\u4e49\u683c\u5f0f\u52a0\u8f7d Trajectory"},{"location":"transforms/custom-trajectory/#trajectory","text":"\u672c\u8282\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u4e13\u7528 Mol* \u5b9e\u4f8b\u4e2d\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u52a0\u8f7d trajectory \u7684\u9ad8\u7ea7\u793a\u4f8b\u3002 \u66f4\u5b8c\u6574\u793a\u4f8b\u67e5\u770b G3D format extension .","title":"\u901a\u8fc7\u81ea\u5b9a\u4e49\u683c\u5f0f\u52a0\u8f7d Trajectory"},{"location":"transforms/custom-trajectory/#_1","text":"import { StateTransformer } from 'molstar/lib/mol-state' ; const CreateTransformer = StateTransformer . builderFactory ( 'custom-namespace' ); export interface CustomTrajectoryData { // ... } export const TrajectoryFromCustomData = CreateTransformer ({ name : 'trajectory-from-custom-data' , display : 'Trajectory' , from : PluginStateObject.Root , to : PluginStateObject.Molecule.Trajectory , params : { data : PD.Value < CustomTrajectoryData > ( void 0 as any , { isHidden : true }), }, })({ apply ({ params }) { return Task . create ( 'Trajectory' , async ( ctx ) => { const models = await customParse ( params . data , ctx ); return new PluginStateObject . Molecule . Trajectory ( models , { label : 'Trajectory' , }); }); }, }); \u81ea\u5b9a\u4e49\u89e3\u6790\u5668\uff08 customParse \uff09\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u548c\u6269\u5c55 existing parser already available in Mol* \u6765\u5b9e\u73b0 \u7528\u8f6c\u6362\u5668 const data : CustomTrajectoryData = await ( await fetch ( url )). json (); const trajectory = await plugin . build (). toRoot (). apply ( TrajectoryFromCustomData , { data }). commit (); // Create the representation await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' );","title":"\u5b9a\u4e49\u548c\u4f7f\u7528\u81ea\u5b9a\u4e49\u8f6c\u6362\u5668"},{"location":"transforms/custom-trajectory/#mol-download","text":"export const TrajectoryFromCustomData = CreateTransformer ({ name : 'trajectory-from-custom-data' , display : 'Trajectory' , from : PluginStateObject.Data.String , // or PluginStateObject.Data.Binary to : PluginStateObject.Molecule.Trajectory , })({ apply ({ a }) { return Task . create ( 'Trajectory' , async ( ctx ) => { const models = await customParse ( a . data , ctx ); return new PluginStateObject . Molecule . Trajectory ( models , { label : 'Trajectory' , }); }); }, }); ////////////// const data = await plugin . builders . data . download ({ url , isBinary }); const trajectory = await plugin . build (). to ( data ). apply ( TrajectoryFromCustomData , { data }). commit (); await plugin . builders . structure . hierarchy . applyPreset ( trajectory , 'default' );","title":"\u901a\u8fc7 Mol* \u52a0\u8f7d\uff08download\uff09\u6570\u636e"}]}